# section name
[general]

# port on which fdtd service will run (the main Python process)
port = 8444

# port on which AuthService will run (Java Grid authentication service)
portAuthService = 8445

# port range on which FDT Java servers will be running upon requests
portRangeFDTServer = 54321,54400

# log file, if necessary to specify directly to fdtd
# subsequent fdtd starts append logs, nothing shall go to stdout
# if necessary (i.e. system running of fdtd.py from shell
# daemon wrapper fdtd.sh), this option is better set when starting
# fdtd.py rather than here
logFile = /var/log/fdtd/fdtd.log

# pid file
# file where fdtd.py stores its pid (used by shell daemon wrapper fdtd.sh)
# pid of the fdtd.py process is stored into this file only
# if daemonize is True
# pidFile value is most likely to be override in system daemon shell wrapper
pidFile = /var/run/fdtd/fdtd.pid

# if set, fdtd.py stores its pid into pidFile, forks, remains running on
# background and returns the shell
daemonize = False

# apart from the above logFile, use also separate log files
# for each transfer request - easier to track issues with concurrent
# transfers (every transfer request consists of multiple
# sub-request (network calls) and these will be logged into separate
# files if this is set)
transferSeparateLogFile = True

# hostname of this machine (when bounding to a special hostname,
# e.g. t3-fdt.ultralight.org or even IP address has to be put here for
# Caltech dual nodes naming (cithep118.ultralight.org
# public name is compute-4-1). 
# Not necessary on the Nebraska end.
#hostname = localhost

# destinations for ApMon MonaLISA monitoring
# local ML client executable from
# http://monalisa.caltech.edu/monalisa__Interactive_Clients__MonALISA_client.html
# relevant group FDT_MON, services:
#   FDTMon_CERN and FDTMon_Caltech (correspondingly)
apMonDestinations = monalisa2.cern.ch:28884, monalisa2.caltech.edu:28884

# debug output level, accepted values:
#   'CRITICAL', 'DEBUG', 'ERROR', 'FATAL' 'WARNING'
debug = DEBUG


# FDT Java client -----------------------------------------------------------

# this is a template for FDT Java sending client
# -v, -vv for debugging output from FDT
# the port value is port for FDT Java (different from port value above
# which is for fdtd service)
# no GSI authentication (GSI turned out not to be possible here,
# details in the email, related command template in the older versions
# of this file in repository)
fdtSendingClientCommand = sudo -u %(sudouser)s /usr/bin/wrapper_fdt.sh -XX:-HeapDumpOnOutOfMemoryError -Xms1024m -Xmx1024m -cp $FDTJAR lia.util.net.copy.FDT -bio -P 16 -p %(port)s -c %(hostDest)s -d / -fl %(fileList)s -rCount 5 -bs 64K -noupdates -enable_apmon -monID %(monID)s

# in case the process is going to be killed, wait some timeout should
# it finish on its own, seconds 
fdtSendingClientKillTimeout = 30


# FDT Java server -----------------------------------------------------------

# -S FDT server option: disable stand-alone mode - once the transfer
# is over, the server shuts down automatically. in order not to interrupt
# server before it definitely finished, wait until server shuts itself
# (unless it is hanging ...)
# also, when transfer fails, e.g. with permission issue (this gets reported
# to the client), but the FDT Java server doesn't shut down even with
# this -S option. Automatic shutdown (-S) is effective only after
# successful transfer.

# -v, -vv for debugging output from FDT (should the output go to console,
# it crashes (OS issue) ...)

# the port value is port for FDT Java (different from port value above which
# is for fdtd service)

# GSI turned out not to be possible here (between FDT client and server)
# details in the email, related (old) server command template - repository

# non Hadoop destination
# fdtReceivingServerCommand = sudo -u %(sudouser)s /usr/bin/wrapper_fdt.sh -cp $FDTJAR lia.util.net.copy.FDT -bs 2M -p %(port)s -wCount 12 -f %(clientIP)s -S -noupdates -enable_apmon -monID %(monID)s

# Hadoop destination
# (previous (for Badar's adapter version) settings erased, left only
# these after Ramiro's writing part reimplementation).
# Summer 2012 - issues with NIO (non-blocking IO), forcing BIO (blocking IO)
# which is default in newer versions of FDT
fdtReceivingServerCommand = sudo -u %(sudouser)s /usr/bin/wrapper_fdt.sh -XX:-HeapDumpOnOutOfMemoryError -Xms1024m -Xmx1024m -Dedu.caltech.hep.hdfs.HadoopFileChannel.useNewAdapter=true -Dlia.util.net.common.FileChannelProviderFactory=edu.caltech.hep.hdfs.HadoopDFSFileChannelProviderFactory -cp $FDTJAR:$FDTHDFSJAR:$FDTHDFSLIBS lia.util.net.copy.FDT -bs 64K -p %(port)s -bio -wCount 5 -f %(clientIP)s -nolock -S -noupdates -enable_apmon -monID %(monID)s

# when starting the process, block until following logging output is captured
fdtServerLogOutputToWaitFor = "FDTServer start listening on port: %(port)s"
# wait for the above log output only certain number of seconds, this timeout
# is waited when starting the process
fdtServerLogOutputTimeout = 15

# in case the process is going to be killed, wait some timeout should
# it finish on its own, seconds
fdtReceivingServerKillTimeout = 20


# AuthService Java server used for GSI authentication -----------------------
# command will not be run via sudo - don't know the local grid user at
# this stage
# stdout, stderr output of the AuthService goes into -log file
# if log file is not specified, stdout, stderr is captured and doesn't
# become available until the AuthService is stopped
authServiceCommand = /usr/bin/wrapper_auth.sh -DX509_CERT_DIR=$X509_CERT_DIR -DX509_SERVICE_KEY=$X509_SERVICE_KEY -DX509_SERVICE_CERT=$X509_SERVICE_CERT -DGRIDMAP=$GRIDMAPFILE -cp $GSILIBS:$FDTJAR:$AUTHSERVICEJAR authenticator.AuthService -p %(port)s -log /var/log/fdtd/fdtd-auth.log
# until the following string appears in the output after which it
# continues asynchronously
authServiceLogOutputToWaitFor = "AuthService started ..."
# wait for the above log output string only certain number of seconds, this
# timeout is waited when starting the process
authServiceLogOutputTimeout = 3

# don't define any kill timeout for AuthService, 0s (default will be used),
# this thing can be killed straight away


# command wrapper for killing external process ------------------------------
killCommandSudo = sudo -u %(sudouser)s /usr/bin/wrapper_kill.sh %(pid)s
killCommand = /usr/bin/wrapper_kill.sh %(pid)s
